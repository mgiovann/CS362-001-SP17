/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 00:17:28 GMT 2017
 */

package edu.osu.cs362;

import org.junit.Test;
import static org.junit.Assert.*;
import edu.osu.cs362.Appt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Appt_ESTest extends Appt_ESTest_scaffolding {

  @Test
  public void test00()  throws Throwable  {
      Appt appt0 = new Appt((-1895), (-1895), (-1895), (-1895), (-1895), "", "");
      appt0.setDescription((String) null);
      assertEquals(-1895, appt0.getStartHour());
      assertEquals(-1895, appt0.getStartYear());
      assertEquals(-1895, appt0.getStartMonth());
      assertFalse(appt0.getValid());
      assertEquals(-1895, appt0.getStartDay());
      assertEquals(-1895, appt0.getStartMinute());
  }

  @Test
  public void test01()  throws Throwable  {
      Appt appt0 = new Appt((-1895), (-1895), (-1895), (-1895), (-1895), "", "");
      appt0.setTitle((String) null);
      assertFalse(appt0.getValid());
      assertEquals(-1895, appt0.getStartMonth());
      assertEquals(-1895, appt0.getStartYear());
      assertEquals(-1895, appt0.getStartHour());
      assertEquals(-1895, appt0.getStartDay());
      assertEquals(-1895, appt0.getStartMinute());
  }

  @Test
  public void test02()  throws Throwable  {
      Appt appt0 = new Appt(1, 1, 1, 11, 6, "ihw=J*K&'?(+7", "InvalidFractional");
      appt0.setTitle("ihw=J*K&'?(+7");
      assertEquals("InvalidFractional", appt0.getDescription());
      assertTrue(appt0.getValid());
      assertEquals(1, appt0.getStartHour());
      assertEquals(11, appt0.getStartMonth());
      assertEquals(1, appt0.getStartMinute());
      assertEquals(1, appt0.getStartDay());
      assertEquals("ihw=J*K&'?(+7", appt0.getTitle());
      assertEquals(6, appt0.getStartYear());
  }

  @Test
  public void test03()  throws Throwable  {
      Appt appt0 = new Appt((-1116), (-1116), (-1116), (-1116), 1, (String) null, "}csw<");
      appt0.setDescription("}csw<");
      assertEquals(-1116, appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertEquals("", appt0.getTitle());
      assertEquals(-1116, appt0.getStartMinute());
      assertEquals(1, appt0.getStartYear());
      assertEquals(-1116, appt0.getStartDay());
      assertEquals("}csw<", appt0.getDescription());
      assertEquals(-1116, appt0.getStartMonth());
  }

  @Test
  public void test04()  throws Throwable  {
      Appt appt0 = new Appt(23, 23, 23, 23, 0, "InvalidXGCValue-fractional", "/I}?\"D\"MwS@");
      int int0 = appt0.getStartYear();
      assertEquals(23, appt0.getStartDay());
      assertEquals("/I}?\"D\"MwS@", appt0.getDescription());
      assertEquals(23, appt0.getStartMinute());
      assertEquals(23, appt0.getStartMonth());
      assertEquals(23, appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertEquals(0, int0);
      assertEquals("InvalidXGCValue-fractional", appt0.getTitle());
  }

  @Test
  public void test05()  throws Throwable  {
      Appt appt0 = new Appt(12, 12, 12, 4266, 12, "/", "/");
      appt0.setStartYear((-2147483572));
      int int0 = appt0.getStartYear();
      assertEquals((-2147483572), int0);
  }

  @Test
  public void test06()  throws Throwable  {
      Appt appt0 = new Appt(3921, 3921, 0, 0, 2439, "iU9\"Z", "iU9\"Z");
      int int0 = appt0.getStartMonth();
      assertEquals(3921, appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartDay());
      assertEquals(2439, appt0.getStartYear());
      assertEquals(0, int0);
      assertEquals("iU9\"Z", appt0.getDescription());
      assertEquals(3921, appt0.getStartHour());
      assertEquals("iU9\"Z", appt0.getTitle());
  }

  @Test
  public void test07()  throws Throwable  {
      Appt appt0 = new Appt((-1116), (-1116), (-1116), (-1116), 1, (String) null, "}csw<");
      int int0 = appt0.getStartMonth();
      assertEquals("}csw<", appt0.getDescription());
      assertEquals((-1116), int0);
      assertEquals(-1116, appt0.getStartHour());
      assertEquals(1, appt0.getStartYear());
      assertEquals(-1116, appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals(-1116, appt0.getStartDay());
      assertEquals("", appt0.getTitle());
  }

  @Test
  public void test08()  throws Throwable  {
      Appt appt0 = new Appt((-330), 0, 0, 104, 0, "q-yI[I", "q-yI[I");
      int int0 = appt0.getStartMinute();
      assertEquals("q-yI[I", appt0.getDescription());
      assertEquals(0, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(104, appt0.getStartMonth());
      assertEquals("q-yI[I", appt0.getTitle());
      assertEquals(0, int0);
      assertEquals(0, appt0.getStartDay());
      assertEquals(-330, appt0.getStartHour());
  }

  @Test
  public void test09()  throws Throwable  {
      Appt appt0 = new Appt((-1775), (-1775), (-1775), 8, 8, ".u1EZQ", ".u1EZQ");
      int int0 = appt0.getStartMinute();
      assertEquals(8, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(".u1EZQ", appt0.getDescription());
      assertEquals((-1775), int0);
      assertEquals(-1775, appt0.getStartHour());
      assertEquals(".u1EZQ", appt0.getTitle());
      assertEquals(8, appt0.getStartMonth());
      assertEquals(-1775, appt0.getStartDay());
  }

  @Test
  public void test10()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 23, 0, 0, " HQ65j-8v!(K{uM`v", "");
      int int0 = appt0.getStartHour();
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, int0);
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartYear());
      assertEquals(23, appt0.getStartDay());
      assertEquals(" HQ65j-8v!(K{uM`v", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
  }

  @Test
  public void test11()  throws Throwable  {
      Appt appt0 = new Appt((-1775), (-1775), (-1775), 8, 8, ".u1EZQ", ".u1EZQ");
      int int0 = appt0.getStartDay();
      assertEquals(8, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(8, appt0.getStartMonth());
      assertEquals(-1775, appt0.getStartMinute());
      assertEquals(-1775, appt0.getStartHour());
      assertEquals(".u1EZQ", appt0.getDescription());
      assertEquals(".u1EZQ", appt0.getTitle());
      assertEquals((-1775), int0);
  }

  @Test
  public void test12()  throws Throwable  {
      Appt appt0 = new Appt(8, 8, 8, 8, 8, "V)&&r6KX", "V)&&r6KX");
      String string0 = appt0.toString();
      assertNotNull(string0);
      assertEquals("\t8/8/8 at 8:8am ,V)&&r6KX, V)&&r6KX\n", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      Appt appt0 = new Appt(0, 31, 31, 0, 0, "1697-02-01T00:00:00Z", "Ca<Kx7~iX8/B");
      assertEquals(0, appt0.getStartMonth());
      assertEquals(31, appt0.getStartMinute());
      assertEquals(31, appt0.getStartDay());
      assertEquals("Ca<Kx7~iX8/B", appt0.getDescription());
      assertEquals("1697-02-01T00:00:00Z", appt0.getTitle());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
  }

  @Test
  public void test14()  throws Throwable  {
      Appt appt0 = new Appt(0, 59, 0, 59, 11, ":", "");
      assertFalse(appt0.getValid());
      assertEquals(11, appt0.getStartYear());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartHour());
      assertEquals(":", appt0.getTitle());
      assertEquals(59, appt0.getStartMinute());
      assertEquals(59, appt0.getStartMonth());
  }

  @Test
  public void test15()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 5475, 0, 5475, "\t", "\t");
      assertEquals("\t", appt0.getDescription());
      assertEquals(5475, appt0.getStartDay());
      assertEquals("\t", appt0.getTitle());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(5475, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartHour());
  }

  @Test
  public void test16()  throws Throwable  {
      Appt appt0 = new Appt(332, 0, 332, (-1), (-1), "", "");
      boolean boolean0 = appt0.getValid();
      assertEquals(332, appt0.getStartHour());
      assertEquals(-1, appt0.getStartYear());
      assertFalse(boolean0);
      assertEquals(0, appt0.getStartMinute());
      assertEquals(-1, appt0.getStartMonth());
      assertEquals(332, appt0.getStartDay());
  }

  @Test
  public void test17()  throws Throwable  {
      Appt appt0 = new Appt(12, 12, 12, 4266, 12, "/", "/");
      assertEquals(4266, appt0.getStartMonth());
      
      appt0.setStartMonth(12);
      String string0 = appt0.toString();
      assertEquals("\t12/12/12 at 12:12pm ,/, /\n", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 5, 3729, "", "D{\"<kp8/91Puv1.?5@");
      String string0 = appt0.toString();
      assertNotNull(string0);
      assertEquals("\t5/11/3729 at 11:11am ,, D{\"<kp8/91Puv1.?5@\n", string0);
  }

  @Test
  public void test19()  throws Throwable  {
      Appt appt0 = new Appt((-1116), (-1116), (-1116), (-1116), 1, (String) null, "}csw<");
      String string0 = appt0.toString();
      assertNull(string0);
      assertEquals(1, appt0.getStartYear());
      assertEquals(-1116, appt0.getStartDay());
      assertEquals(-1116, appt0.getStartMinute());
      assertEquals("", appt0.getTitle());
      assertEquals(-1116, appt0.getStartHour());
      assertEquals("}csw<", appt0.getDescription());
      assertEquals(-1116, appt0.getStartMonth());
  }

  @Test
  public void test20()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 5475, 0, "\t", "\t");
      assertEquals(0, appt0.getStartMinute());
      
      appt0.setStartMinute(5475);
      assertEquals(5475, appt0.getStartMonth());
  }

  @Test
  public void test21()  throws Throwable  {
      Appt appt0 = new Appt((-1895), (-1895), (-1895), (-1895), (-1895), "", "");
      appt0.setStartDay((-1895));
      assertFalse(appt0.getValid());
      assertEquals(-1895, appt0.getStartMonth());
      assertEquals(-1895, appt0.getStartYear());
      assertEquals(-1895, appt0.getStartHour());
      assertEquals(-1895, appt0.getStartDay());
      assertEquals(-1895, appt0.getStartMinute());
  }

  @Test
  public void test22()  throws Throwable  {
      Appt appt0 = new Appt(0, 23, 0, 0, 0, "yf~I.]Ec0*Y;qV3", "yf~I.]Ec0*Y;qV3");
      int int0 = appt0.getStartDay();
      assertEquals(0, int0);
      assertEquals(0, appt0.getStartYear());
      assertEquals("yf~I.]Ec0*Y;qV3", appt0.getTitle());
      assertEquals(23, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("yf~I.]Ec0*Y;qV3", appt0.getDescription());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartHour());
  }

  @Test
  public void test23()  throws Throwable  {
      Appt appt0 = new Appt((-1116), (-1116), (-1116), (-1116), 1, (String) null, "}csw<");
      assertEquals(-1116, appt0.getStartHour());
      
      appt0.setStartHour(1);
      int int0 = appt0.getStartHour();
      assertEquals(1, int0);
  }

  @Test
  public void test24()  throws Throwable  {
      Appt appt0 = new Appt(1, 1, 1, 11, 6, "ihw=J*K&'?(+7", "InvalidFractional");
      boolean boolean0 = appt0.getValid();
      assertEquals("InvalidFractional", appt0.getDescription());
      assertEquals(6, appt0.getStartYear());
      assertEquals(1, appt0.getStartDay());
      assertTrue(boolean0);
      assertEquals(1, appt0.getStartMinute());
      assertEquals(11, appt0.getStartMonth());
      assertEquals("ihw=J*K&'?(+7", appt0.getTitle());
      assertEquals(1, appt0.getStartHour());
  }

  @Test
  public void test25()  throws Throwable  {
      Appt appt0 = new Appt(23, 23, 23, 23, 0, "InvalidXGCValue-fractional", "/I}?\"D\"MwS@");
      String string0 = appt0.getTitle();
      assertFalse(appt0.getValid());
      assertEquals(23, appt0.getStartHour());
      assertEquals("/I}?\"D\"MwS@", appt0.getDescription());
      assertEquals(23, appt0.getStartDay());
      assertEquals("InvalidXGCValue-fractional", string0);
      assertEquals(23, appt0.getStartMonth());
      assertEquals(23, appt0.getStartMinute());
      assertEquals(0, appt0.getStartYear());
  }

  @Test
  public void test26()  throws Throwable  {
      Appt appt0 = new Appt(1, 1, 1, 11, 6, "ihw=J*K&'?(+7", "InvalidFractional");
      int int0 = appt0.getStartYear();
      assertEquals(1, appt0.getStartMinute());
      assertEquals(6, int0);
      assertTrue(appt0.getValid());
      assertEquals(1, appt0.getStartDay());
      assertEquals("InvalidFractional", appt0.getDescription());
      assertEquals(11, appt0.getStartMonth());
      assertEquals("ihw=J*K&'?(+7", appt0.getTitle());
      assertEquals(1, appt0.getStartHour());
  }

  @Test
  public void test27()  throws Throwable  {
      Appt appt0 = new Appt(1, 1, 1, 11, 6, "ihw=J*K&'?(+7", "InvalidFractional");
      int int0 = appt0.getStartMonth();
      assertEquals(1, appt0.getStartMinute());
      assertEquals(6, appt0.getStartYear());
      assertEquals(1, appt0.getStartHour());
      assertEquals("ihw=J*K&'?(+7", appt0.getTitle());
      assertEquals("InvalidFractional", appt0.getDescription());
      assertEquals(11, int0);
      assertTrue(appt0.getValid());
      assertEquals(1, appt0.getStartDay());
  }

  @Test
  public void test28()  throws Throwable  {
      Appt appt0 = new Appt(1, 1, 1, 11, 6, "ihw=J*K&'?(+7", "InvalidFractional");
      int int0 = appt0.getStartMinute();
      assertEquals(1, appt0.getStartDay());
      assertEquals(6, appt0.getStartYear());
      assertEquals("ihw=J*K&'?(+7", appt0.getTitle());
      assertEquals(1, appt0.getStartHour());
      assertTrue(appt0.getValid());
      assertEquals(11, appt0.getStartMonth());
      assertEquals(1, int0);
      assertEquals("InvalidFractional", appt0.getDescription());
  }

  @Test
  public void test29()  throws Throwable  {
      Appt appt0 = new Appt((-1116), (-1116), (-1116), (-1116), 1, (String) null, "}csw<");
      int int0 = appt0.getStartHour();
      assertEquals(-1116, appt0.getStartDay());
      assertEquals("}csw<", appt0.getDescription());
      assertEquals(-1116, appt0.getStartMinute());
      assertEquals("", appt0.getTitle());
      assertFalse(appt0.getValid());
      assertEquals(1, appt0.getStartYear());
      assertEquals((-1116), int0);
      assertEquals(-1116, appt0.getStartMonth());
  }

  @Test
  public void test30()  throws Throwable  {
      Appt appt0 = new Appt(1, 1, 1, 11, 6, "ihw=J*K&'?(+7", "InvalidFractional");
      int int0 = appt0.getStartDay();
      assertEquals(1, appt0.getStartHour());
      assertEquals(11, appt0.getStartMonth());
      assertEquals("InvalidFractional", appt0.getDescription());
      assertEquals(1, appt0.getStartMinute());
      assertEquals(1, int0);
      assertTrue(appt0.getValid());
      assertEquals(6, appt0.getStartYear());
      assertEquals("ihw=J*K&'?(+7", appt0.getTitle());
  }

  @Test
  public void test31()  throws Throwable  {
      Appt appt0 = new Appt(1, 1, 1, 11, 6, "ihw=J*K&'?(+7", "InvalidFractional");
      String string0 = appt0.getDescription();
      assertEquals(1, appt0.getStartHour());
      assertTrue(appt0.getValid());
      assertEquals("InvalidFractional", string0);
      assertEquals(6, appt0.getStartYear());
      assertEquals("ihw=J*K&'?(+7", appt0.getTitle());
      assertEquals(1, appt0.getStartDay());
      assertEquals(1, appt0.getStartMinute());
      assertEquals(11, appt0.getStartMonth());
  }
}
